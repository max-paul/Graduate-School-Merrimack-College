1. strangely enough after my internet finds I found the opposite to be true

2. for a random number between 0 - 10000, we randomly choose and assign 5000 numbers for each algorithm, Bubble and selection sort

3. The bubble sort algorithm was better than the selection sort method in the sense of time, which was a cool find in this process.

The bubble sort algorthm was fast on average of .4 seconds for each run. considering 5000 random integers is relatively small i am going to test on 20000 numbers


After adjusting the random number list to 20,000 the findings we see the results stay the same, bubble sort is our winner.


When uping the data to around 50,000 + we start to see the algorithms diverge:

When the list is small. As the time complexity of the selection sort is O(N2) which makes it inefficient for a large list.
When memory space is limited because it makes the minimum possible number of swaps during sorting.


Bubble Sort works well with large datasets where the items are almost sorted because it takes only one iteration to detect whether the list is sorted or not. But if the list is unsorted to a large extend then this algorithm holds good for small datasets or lists.
This algorithm is fastest on an extremely small or nearly sorted set of data.


So for very small lists of data I will choose Bubble sort and in a variation of data length I would choose the selection sort (implying that resource hardware doesnt matter)

